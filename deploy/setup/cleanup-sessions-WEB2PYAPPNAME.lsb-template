#! /bin/sh
### BEGIN INIT INFO
# Provides:          cleanup-sessions-WEB2PY_APP_DIRNAME
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Session sweeper for web2py (LSB version)
# Description:       Periodically remove old/expired web2py sessions.
#                    This version uses LSB/Debian-specific commands for logging
#                    and daemon management.
### END INIT INFO

# Author: Jim Allman <jim@ibang.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
WEB2PYAPPNAME=WEB2PY_APP_DIRNAME
WEB2PYDIR=/home/opentree/web2py
VENVDIR=/home/opentree/venv
DESC="Session cleanup for web2py app '$WEB2PYAPPNAME'"
NAME=cleanup-sessions-$WEB2PYAPPNAME
DAEMON="python $WEB2PYDIR/web2py.py -S $WEB2PYAPPNAME -M -R scripts/sessions2trash.py"
DAEMON_ARGS="-A --verbose --expiration 3600 --sleep 3600 "   # 3600 sec = 1 hr
DAEMON_USER=opentree
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

# Enter our virtualenv (if it exists) and launch the sweeper
[ -x "$VENVDIR/bin/activate" ] || exit 0
. $VENVDIR/bin/activate

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon --start --verbose \
        --make-pidfile --pidfile $PIDFILE \
        --exec $DAEMON --test > /dev/null \
        || return 1
    # that was just a check for already-running service... now for the real start:
    start-stop-daemon --start --verbose \
        --make-pidfile --pidfile $PIDFILE \
        --exec $DAEMON -- \
        $DAEMON_ARGS >> /tmp/$NAME.log \
        || return 2
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon --stop --verbose \
        --remove-pidfile --pidfile $PIDFILE \
        --retry=TERM/30/KILL/5 \
        --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2
    # Wait for any children to finish too, or other resources to be dropped.
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Delete our pidfile on exit.
    rm -f $PIDFILE
    return "$RETVAL"
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    echo "Usage: $SCRIPTNAME {start|stop|restart|status|force-reload}" >&2
    exit 3
    ;;
esac

:
